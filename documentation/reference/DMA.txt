Setup DMA and UART
------------------

DMA
===

DCH1INT = 0xb0000; -> Is this getting set incorrectly?
------------------  
CHBCIE = 1
CHTAIE=1
CHERIE=1
CHSHIE= 0
CHDHIE= 0
    
IEC2SET = 0 | 0x200;
--------------------

DMAC_Initialize()
-----------------

- Turn on DMA Controller
- Initialize chanObj instance
- Set DMA parameters
- Enable DMA interrupts

DMACON -> ON =1 Turn on DMA Controller 

//Instance object is initialized
chanObj->inUse          =    false;
chanObj->pEventCallBack =    NULL;
chanObj->hClientArg     =    0;
chanObj->errorInfo      =    DMAC_ERROR_NONE;

DCH1CON = 0x1;
CHPRI = 1   //channel priority = 1
CHAEN= 0    //channel is disabled on block transfer complete -> TODO change?
CHCHN= 0    //channel not chained
CHCHNS= 0x0 //n/a since channel not chained 
CHAED= 0    //ignore events if channel disabled
    
DCH1ECON = 0x2710;
CHSIRQ = 39  //IRQ 39 - UART1 has at least one receive character. This will initiate DMA xfer
SIRQEN = 1   //Start cell transfer if interrupt matching CHSIRQ occurs



DMA1_InterruptHandler()
-----------------------

- check source of DMA interrupt
  - DCH1INTbits.CHBCIF == true //irq due to transfer complete
  - dmaEvent = DMAC_TRANSFER_EVENT_COMPLETE
  - inUse set to false
- Clear interrupt flag and call callback
  - DCH1INT



How does the Uart Driver Work?
==============================

UART1_Initialize()
------------------

-Disable UART1
-Set mode parameters
-Set baud rate
-Disable Interrupt
-Enable Tx and Rx
-Set interrupt conditions
-Initialize a uart1Obj instance
-Enable UART1

//U1MODE = 0x8 -> UART1 is disabled at first and other mode bits set
ON = 0

//Instance object is initialized (only showing Rx relevant)
uart1Obj.rxBuffer = NULL;          //array where to place Rx bytes
uart1Obj.rxSize = 0;               //size of the above array
uart1Obj.rxProcessedSize = 0;      //counter for how many bytes are currently in the array
uart1Obj.rxBusyStatus = false;     //indicate if a read operation in process
uart1Obj.rxCallback = NULL;        //name of callback fctn called from ISR       
uart1Obj.errors = UART_ERROR_NONE;

//U1BRG
BRG<19:0> 1562 -> 9600bps with U1BRG = 1

//U1STA
enable UT1EN UR1EN 
set UTXISEL<1:0> Interrupt Flag Asserted while Tx buffer is empty
UR1ISEL<1:0> = 00 Interrupt Flag Asserted while Rx buffer is not empty - has at least one character

//U1MODE 0x 00 00 80 00 -> 1000 0000 0000 0000 -> UART1 Enabled through mask
ON = 1


UART1_Read()
------------
//Starts a read operation

- if rxBusyStatus is false:
  - Set uart1Obj attributes (ie: rxBusyStatus = true)
  - enable UART1_RX Interrupt (IEC1 bit 7)


UART1_RX_InterruptHandler()
---------------------------
//TODO -> Remove 9-bit mode checking -> ok

- if rxBusyStatus is true:
  - loop while UR1DA (Data Available) and rxSize > rxProcessedSize
  - put U1RXREG into rxBuffer[rxProcessedSize] and increment rxProcessedSize
  
- Clear U1RXIF

- if rxBuffer is full:
  - rxBusyStatus = false
  - disable U1EIE and U1RXIE
  - call rxCallback
  
In Interrupts.c UART1_RX_Handler is a wrapper for UART1_RX_InterruptHandler()
The handler is mapped to the corresponding interrupt vector.
As I understand it, when an interrupt occurs, program control will be transferred and start to execute
from the area in memory pointed to by the corresponding interrupt.


// Register a callback

if writeStatus = true
  set writeStatus = false
  DMAC_ChannelTransfer(DMAC_CHANNEL_0, &echoBuffer, sizeof(echoBuffer), (const void *)&U1TXREG, 1, 1);
  
  RX_BUFFER_SIZE 10
  
  volatile static bool writeStatus = false;
  static char __attribute__((coherent)) echoBuffer[RX_BUFFER_SIZE+2] = {};
  static char __attribute__((coherent)) receiveBuffer[RX_BUFFER_SIZE] = {};
  
  ReceiveCompleteCallback(DMAC_TRANSFER_EVENT event, uintptr_t contextHandle);
  
  
  start a transmit channel transfer
  when the channel transfer is complete -> writeStatus = true
  then set writeStatus = false and submit buffer to read data DMAC_ChannelTransfer(u1RXREG -> receiveBuffer)